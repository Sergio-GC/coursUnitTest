using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TP1_SergioCeline.AlgoFilters;

namespace TP1_SergioCeline.Test.AlgoFilters
{
    // Generated by ChatGPT
    [TestClass]
    public class ColorSwapTests
    {
        private ColorSwap _cs;

        [TestInitialize]
        public void init()
        {
            _cs = new();
        }

        #region Test if the algorithm returns the same image when given a blank image
        [TestMethod]
        public void ExecuteAlgo_BlankImage()
        {
            // Arrange
            Bitmap blankImage = new Bitmap(100, 100);
            // Act
            Bitmap result = _cs.ExecuteAlgo(blankImage);
            // Assert
            Assert.AreEqual(blankImage.Width, result.Width);
            Assert.AreEqual(blankImage.Height, result.Height);
            for (int i = 0; i < blankImage.Width; i++)
            {
                for (int x = 0; x < blankImage.Height; x++)
                {
                    // Get the current color from both images
                    Color oriColor = blankImage.GetPixel(i, x);
                    Color newColor = result.GetPixel(i, x);

                    // Expected color
                    Color expected = Color.FromArgb(oriColor.A, oriColor.G, oriColor.B, oriColor.R);

                    Assert.AreEqual(expected, newColor);
                }
            }
        }
        #endregion

        #region Test that the color is correctly swapped in a single pixel
        [TestMethod]
        public void ExecuteAlgo_SinglePixel()
        {
            // Arrange
            Bitmap image = new(1, 1);
            image.SetPixel(0, 0, Color.FromArgb(255, 10, 20, 30));
            // Act
            Bitmap result = _cs.ExecuteAlgo(image);
            // Assert
            Assert.AreEqual(image.Width, result.Width);
            Assert.AreEqual(image.Height, result.Height);
            Assert.AreEqual(Color.FromArgb(255, 20, 30, 10), result.GetPixel(0, 0));
        }
        #endregion

        #region Test if the algorithm correctly swaps the colors
        [TestMethod]
        public void ExecuteAlgo_NonBlankImage()
        {
            // Arrange
            Bitmap image = new Bitmap(2, 2);
            image.SetPixel(0, 0, Color.FromArgb(255, 10, 20, 30));
            image.SetPixel(1, 0, Color.FromArgb(255, 40, 50, 60));
            image.SetPixel(0, 1, Color.FromArgb(255, 70, 80, 90));
            image.SetPixel(1, 1, Color.FromArgb(255, 100, 110, 120));
            // Act
            Bitmap result = _cs.ExecuteAlgo(image);
            // Assert
            Assert.AreEqual(image.Width, result.Width);
            Assert.AreEqual(image.Height, result.Height);
            Assert.AreEqual(Color.FromArgb(255, 20, 30, 10), result.GetPixel(0, 0));
            Assert.AreEqual(Color.FromArgb(255, 50, 60, 40), result.GetPixel(1, 0));
            Assert.AreEqual(Color.FromArgb(255, 80, 90, 70), result.GetPixel(0, 1));
            Assert.AreEqual(Color.FromArgb(255, 110, 120, 100), result.GetPixel(1, 1));
        }
        #endregion
    }
}
