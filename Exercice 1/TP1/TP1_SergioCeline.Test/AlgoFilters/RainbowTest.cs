using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using TP1_SergioCeline.AlgoFilters;

namespace TP1_SergioCeline.Test.AlgoFilters
{
    // Generated by ChatGPT
    [TestClass]
    public class RainbowTest
    {
        private TestConfig testConfig;
        private Rainbow _rainbow;

        [TestInitialize]
        public void init()
        {
            _rainbow = new Rainbow();
            string json = File.ReadAllText("testImageConfig.json");
            testConfig = JsonSerializer.Deserialize<TestConfig>(json);
        }

        #region Rainbow filter test
        [TestMethod]
        public void Rainbow_Algo_ReturnsCorrectImage()
        {
            string _directoryPath = testConfig.ImageDirectoryPath;

            // Arrange
            Bitmap initBitmap = new($"{_directoryPath}/init.png");
            Bitmap expectedBitmap = new($"{_directoryPath}/rainbows.png");

            // Act
            Bitmap resultBitmap = _rainbow.algo(initBitmap);

            // Assert
            Assert.IsNotNull(resultBitmap);
            Assert.AreEqual(initBitmap.Width, resultBitmap.Width);
            Assert.AreEqual(initBitmap.Height, resultBitmap.Height);

            for (int i = 0; i < expectedBitmap.Width; i++)
            {
                for (int j = 0; j < expectedBitmap.Height; j++)
                {
                    Assert.AreEqual(expectedBitmap.GetPixel(i, j), resultBitmap.GetPixel(i, j));
                }
            }
        }
        #endregion

        #region Dividers test
        [TestMethod]
        public void GetDividers_ReturnsCorrectDividers()
        {
            // Act
            var dividers1 = _rainbow.GetDividers(10, 20);
            var dividers2 = _rainbow.GetDividers(30, 20);
            var dividers3 = _rainbow.GetDividers(50, 20);
            var dividers4 = _rainbow.GetDividers(70, 20);
            var dividers5 = _rainbow.GetDividers(90, 20);

            // Assert
            Assert.AreEqual(5, dividers1.red);
            Assert.AreEqual(1, dividers1.green);
            Assert.AreEqual(1, dividers1.blue);

            Assert.AreEqual(1, dividers2.red);
            Assert.AreEqual(5, dividers2.green);
            Assert.AreEqual(1, dividers2.blue);

            Assert.AreEqual(1, dividers3.red);
            Assert.AreEqual(1, dividers3.green);
            Assert.AreEqual(5, dividers3.blue);

            Assert.AreEqual(5, dividers4.red);
            Assert.AreEqual(1, dividers4.green);
            Assert.AreEqual(5, dividers4.blue);

            Assert.AreEqual(5, dividers5.red);
            Assert.AreEqual(5, dividers5.green);
            Assert.AreEqual(5, dividers5.blue);
        }
        #endregion
    }
}
